@using System.ComponentModel.DataAnnotations
@using HomeQR.Data

@inject QrCodesService QrCodesService

<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    Add new target
                </h5>
                <button type="button" class="btn btn-close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()" />
            </div>
            <EditForm Model="@Model" OnValidSubmit="@Submit">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label for="name">Name</label>
                        <InputText @bind-Value="Model.Name" class="form-control" id="name" />
                        <ValidationMessage For="@(() => Model.Name)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="type">Type</label>
                        <select @onchange="TargetTypeChanged" class="form-control" id="type">
                            <option value="Url">URL</option>
                            <option value="Pdf">PDF</option>
                        </select>
                    </div>

                    @if (ModelType == ModalType.Url)
                    {
                        <div class="form-group mb-3">
                            <label for="url">Url</label>
                            <InputText @bind-Value="((UrlTargetDTO)Model).Url" class="form-control" id="url" />
                            <ValidationMessage For="@(() => ((UrlTargetDTO)Model).Url)" />
                        </div>
                    }
                    else
                    {
                        <div class="form-group mb-3">
                            <label for="pdf">PDF file</label>
                            <InputFile OnChange="HandleFileUpload" class="form-control" id="pdf" accept=".pdf" />
                            <ValidationMessage For="@(() => ((PdfTargetDTO)Model).Pdf)" />
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="submit" disabled="@uploadingFile" class="btn btn-primary">Add</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Close</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

@code
{
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [Parameter]
    public QrCode QrCode { get; set; }

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    private bool uploadingFile;

    public ModalType ModelType { get; set; }
    private UrlTargetDTO UrlModel { get; } = new UrlTargetDTO();
    private PdfTargetDTO PdfModel { get; } = new PdfTargetDTO();
    public TargetDTO Model { get; set; }

    protected override void OnInitialized()
    {
        ModelType = ModalType.Url;
        Model = UrlModel;
    }

    private void TargetTypeChanged(ChangeEventArgs e)
    {
        ModelType = (ModalType)Enum.Parse(typeof(ModalType), e.Value.ToString());

        UrlModel.Name = Model.Name;
        PdfModel.Name = Model.Name;

        switch (ModelType)
        {
            case ModalType.Url:
                Model = UrlModel;
                break;
            case ModalType.Pdf:
                Model = PdfModel;
                break;
        }
    }

    private async Task Submit()
    {
        if (QrCode is null)
            return;

        if (ModelType == ModalType.Url)
        {
            var urlModel = (UrlTargetDTO)Model;
            await QrCodesService.AddUrlTarget(QrCode, urlModel.Name, urlModel.Url);
        }
        else
        {
            var pdfModel = (PdfTargetDTO)Model;
            await QrCodesService.AddPdfTarget(QrCode, pdfModel.Name, pdfModel.FileName, pdfModel.Pdf);
        }

        await OnSubmit.InvokeAsync();
        Close();
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        uploadingFile = true;
        var pdfContent = new byte[e.File.Size];
        ((PdfTargetDTO)Model).FileName = e.File.Name;
        await e.File.OpenReadStream(maxAllowedSize: 1024000).ReadAsync(pdfContent);
        ((PdfTargetDTO)Model).Pdf = pdfContent;
        uploadingFile = false;
    }

    public void Open()
    {
        ModalDisplay = "block;";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }

    public enum ModalType
    {
        Url,
        Pdf
    }

    public class TargetDTO
    {
        [Required]
        [MaxLength(1024)]
        public string Name { get; set; }
    }

    public class UrlTargetDTO : TargetDTO
    {
        [Required]
        [MaxLength(1024)]
        public string Url { get; set; }
    }

    public class PdfTargetDTO : TargetDTO
    {
        [Required]
        public byte[] Pdf { get; set; }

        public string FileName { get; set; }
    }
}
